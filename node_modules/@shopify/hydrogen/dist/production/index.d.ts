import { createStorefrontClient as createStorefrontClient$1 } from '@shopify/hydrogen-react';
export { AnalyticsEventName, AnalyticsPageType, ClientBrowserParameters, ExternalVideo, IMAGE_FRAGMENT, Image, MediaFile, ModelViewer, Money, ParsedMetafields, ShopPayButton, ShopifyAddToCart, ShopifyAddToCartPayload, ShopifyAnalytics, ShopifyAnalyticsPayload, ShopifyAnalyticsProduct, ShopifyCookies, ShopifyPageView, ShopifyPageViewPayload, ShopifySalesChannel, StorefrontApiResponse, StorefrontApiResponseError, StorefrontApiResponseOk, StorefrontApiResponseOkPartial, StorefrontApiResponsePartial, Video, flattenConnection, getClientBrowserParameters, getShopifyCookies, parseMetafield, sendShopifyAnalytics, storefrontApiCustomScalars, useMoney, useShopifyCookies } from '@shopify/hydrogen-react';
import { ExecutionArgs } from 'graphql';
import { LanguageCode, CountryCode, Maybe } from '@shopify/hydrogen-react/storefront-api-types';
import { LoaderArgs, LoaderFunction, SerializeFrom, AppData } from '@remix-run/server-runtime';
import * as react from 'react';
import { Params, Location } from '@remix-run/react';
import { Thing, WithContext } from 'schema-dts';

interface AllCacheOptions {
    mode?: string;
    maxAge?: number;
    staleWhileRevalidate?: number;
    sMaxAge?: number;
    staleIfError?: number;
}
type CachingStrategy = AllCacheOptions;
type NoStoreStrategy = {
    mode: string;
};
declare function generateCacheControlHeader(cacheOptions: CachingStrategy): string;
/**
 *
 * @public
 */
declare function CacheNone(): NoStoreStrategy;
/**
 *
 * @public
 */
declare function CacheShort(overrideOptions?: CachingStrategy): AllCacheOptions;
/**
 *
 * @public
 */
declare function CacheLong(overrideOptions?: CachingStrategy): AllCacheOptions;
/**
 *
 * @public
 */
declare function CacheCustom(overrideOptions: CachingStrategy): AllCacheOptions;

type I18nBase = {
    language: LanguageCode;
    country: CountryCode;
};
type StorefrontClient<TI18n extends I18nBase> = {
    storefront: Storefront<TI18n>;
};
type Storefront<TI18n extends I18nBase = I18nBase> = {
    query: <T>(query: string, payload?: StorefrontCommonOptions & {
        cache?: CachingStrategy;
    }) => Promise<T>;
    mutate: <T>(mutation: string, payload?: StorefrontCommonOptions) => Promise<T>;
    cache?: Cache;
    CacheNone: typeof CacheNone;
    CacheLong: typeof CacheLong;
    CacheShort: typeof CacheShort;
    CacheCustom: typeof CacheCustom;
    generateCacheControlHeader: typeof generateCacheControlHeader;
    getPublicTokenHeaders: ReturnType<typeof createStorefrontClient$1>['getPublicTokenHeaders'];
    getPrivateTokenHeaders: ReturnType<typeof createStorefrontClient$1>['getPrivateTokenHeaders'];
    getShopifyDomain: ReturnType<typeof createStorefrontClient$1>['getShopifyDomain'];
    getApiUrl: ReturnType<typeof createStorefrontClient$1>['getStorefrontApiUrl'];
    isApiError: (error: any) => boolean;
    i18n: TI18n;
};
type CreateStorefrontClientOptions<TI18n extends I18nBase> = Parameters<typeof createStorefrontClient$1>[0] & {
    storefrontHeaders?: StorefrontHeaders;
    cache?: Cache;
    /** @deprecated use storefrontHeaders instead */
    buyerIp?: string;
    /** @deprecated use storefrontHeaders instead */
    requestGroupId?: string | null;
    storefrontId?: string;
    waitUntil?: ExecutionContext['waitUntil'];
    i18n?: TI18n;
};
type StorefrontHeaders = {
    requestGroupId: string | null;
    buyerIp: string | null;
    cookie: string | null;
};
type StorefrontCommonOptions = {
    variables?: ExecutionArgs['variableValues'] & {
        country?: CountryCode;
        language?: LanguageCode;
    };
    headers?: HeadersInit;
    storefrontApiVersion?: string;
};
type StorefrontQueryOptions = StorefrontCommonOptions & {
    query: string;
    mutation?: never;
    cache?: CachingStrategy;
};
type StorefrontMutationOptions = StorefrontCommonOptions & {
    query?: never;
    mutation: string;
    cache?: never;
};
declare const isStorefrontApiError: (error: any) => boolean;
declare function createStorefrontClient<TI18n extends I18nBase>({ storefrontHeaders, cache, waitUntil, buyerIp, i18n, requestGroupId, storefrontId, ...clientOptions }: CreateStorefrontClientOptions<TI18n>): StorefrontClient<TI18n>;

type CacheKey = string | readonly unknown[];

/**
 * Creates a utility function that executes an asynchronous operation
 * like `fetch` and caches the result according to the strategy provided.
 * Use this to call any third-party APIs from loaders or actions.
 * By default, it uses the `CacheShort` strategy.
 *
 * Example:
 *
 * ```js
 * // In your app's `server.ts` file:
 * createRequestHandler({
 *   /* ... *\/,
 *   getLoadContext: () => ({ withCache: createWithCache_unstable({cache, waitUntil}) })
 * });
 *
 * // In your route loaders:
 * import {CacheShort} from '@shopify/hydrogen';
 * export async function loader ({context: {withCache}}) {
 *   const data = await withCache('my-unique-key', CacheShort(), () => {
 *     return fetch('https://example.com/api').then(res => res.json());
 *   });
 * ```
 */
declare function createWithCache_unstable({ cache, waitUntil, }: {
    cache: Cache;
    waitUntil: ExecutionContext['waitUntil'];
}): <T = unknown>(cacheKey: CacheKey, strategy: CachingStrategy, actionFn: () => T | Promise<T>) => Promise<T>;
type WithCache = ReturnType<typeof createWithCache_unstable>;

/**
 * This is a limited implementation of an in-memory cache.
 * It only supports the `cache-control` header.
 * It does NOT support `age` or `expires` headers.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Cache
 */
declare class InMemoryCache implements Cache {
    #private;
    constructor();
    add(request: RequestInfo): Promise<void>;
    addAll(requests: RequestInfo[]): Promise<void>;
    matchAll(request?: RequestInfo, options?: CacheQueryOptions): Promise<readonly Response[]>;
    put(request: Request, response: Response): Promise<void>;
    match(request: Request): Promise<Response | undefined>;
    delete(request: Request): Promise<boolean>;
    keys(request?: Request): Promise<Request[]>;
}

type StorefrontRedirect = {
    storefront: Storefront<I18nBase>;
    request: Request;
    response?: Response;
};
/**
 * Queries the Storefront API to see if there is any redirect
 * created for the current route and performs it. Otherwise,
 * it returns the response passed in the parameters. Useful for
 * conditionally redirecting after a 404 response.
 *
 * @see {@link https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect Creating URL redirects in Shopify}
 */
declare function storefrontRedirect({ storefront, request, response, }: StorefrontRedirect): Promise<Response>;

declare function graphiqlLoader({ context }: LoaderArgs): Response;

interface SeoConfig<Schema extends Thing = Thing> {
    /**
     * The <title> HTML element defines the document's title that is shown in a browser's title bar or a page's tab. It
     * only contains text; tags within the element are ignored.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
     */
    title?: Maybe<string>;
    /**
     * Generate the title from a template that includes a `%s` placeholder for the title.
     *
     * @example
     * ```js
     * {
     *   title: 'My Page',
     *   titleTemplate: 'My Site - %s',
     * }
     * ```
     */
    titleTemplate?: Maybe<string> | null;
    /**
     * The media associated with the given page (images, videos, etc). If you pass a string, it will be used as the
     * `og:image` meta tag. If you pass an object or an array of objects, that will be used to generate `og:<type of
     * media>` meta tags. The `url` property should be the URL of the media. The `height` and `width` properties are
     * optional and should be the height and width of the media. The `altText` property is optional and should be a
     * description of the media.
     *
     * @example
     * ```js
     * {
     *   media: [
     *     {
     *       url: 'https://example.com/image.jpg',
     *       type: 'image',
     *       height: '400',
     *       width: '400',
     *       altText: 'A custom snowboard with an alpine color pallet.',
     *     }
     *   ]
     * }
     * ```
     *
     */
    media?: Maybe<string> | Partial<SeoMedia> | (Partial<SeoMedia> | Maybe<string>)[];
    /**
     * The description of the page. This is used in the `name="description"` meta tag as well as the `og:description` meta
     * tag.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
     */
    description?: Maybe<string>;
    /**
     * The canonical URL of the page. This is used to tell search engines which URL is the canonical version of a page.
     * This is useful when you have multiple URLs that point to the same page. The value here will be used in the
     * `rel="canonical"` link tag as well as the `og:url` meta tag.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link
     */
    url?: Maybe<string>;
    /**
     * The handle is used to generate the `twitter:site` and `twitter:creator` meta tags. Include the `@` symbol in the
     * handle.
     *
     * @example
     * ```js
     * {
     *   handle: '@shopify'
     * }
     * ```
     */
    handle?: Maybe<string>;
    /**
     * The `jsonLd` property is used to generate the `application/ld+json` script tag. This is used to provide structured
     * data to search engines. The value should be an object that conforms to the schema.org spec. The `type` property
     * should be the type of schema you are using. The `type` property is required and should be one of the following:
     *
     * - `Product`
     * - `ItemList`
     * - `Organization`
     * - `WebSite`
     * - `WebPage`
     * - `BlogPosting`
     * - `Thing`
     *
     * @example
     * ```js
     * {
     *   jsonLd: {
     *     '@context': 'https://schema.org',
     *     '@type': 'Product',
     *     name: 'My Product',
     *     image: 'https://hydrogen.shop/image.jpg',
     *     description: 'A product that is great',
     *     sku: '12345',
     *     mpn: '12345',
     *     brand: {
     *       '@type': 'Thing',
     *       name: 'My Brand',
     *     },
     *     aggregateRating: {
     *       '@type': 'AggregateRating',
     *       ratingValue: '4.5',
     *       reviewCount: '100',
     *     },
     *     offers: {
     *       '@type': 'Offer',
     *       priceCurrency: 'USD',
     *       price: '100',
     *       priceValidUntil: '2020-11-05',
     *       itemCondition: 'https://schema.org/NewCondition',
     *       availability: 'https://schema.org/InStock',
     *       seller: {
     *         '@type': 'Organization',
     *         name: 'My Brand',
     *       },
     *     },
     *   }
     * }
     * ```
     *
     * @see https://schema.org/docs/schemas.html
     * @see https://developers.google.com/search/docs/guides/intro-structured-data
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
     *
     */
    jsonLd?: WithContext<Schema> | WithContext<Schema>[];
    /**
     * The `alternates` property is used to specify the language and geographical targeting when you have multiple
     * versions of the same page in different languages. The `url` property tells search engines about these variations
     * and helps them to serve the correct version to their users.
     *
     * @example
     * ```js
     * {
     *   alternates: [
     *     {
     *       language: 'en-US',
     *       url: 'https://hydrogen.shop/en-us',
     *       default: true,
     *     },
     *     {
     *       language: 'fr-CA',
     *       url: 'https://hydrogen.shop/fr-ca',
     *     },
     *   ]
     * }
     * ```
     *
     * @see https://support.google.com/webmasters/answer/189077?hl=en
     */
    alternates?: LanguageAlternate | LanguageAlternate[];
    /**
     * The `robots` property is used to specify the robots meta tag. This is used to tell search engines which pages
     * should be indexed and which should not.
     *
     * @see https://developers.google.com/search/reference/robots_meta_tag
     */
    robots?: RobotsOptions;
}
/**
 * @see https://developers.google.com/search/docs/crawling-indexing/robots-meta-tag
 */
interface RobotsOptions {
    /**
     * Set the maximum size of an image preview for this page in a search results Can be one of the following:
     *
     * - `none` - No image preview is to be shown.
     * - `standard` - A default image preview may be shown.
     * - `large` - A larger image preview, up to the width of the viewport, may be shown.
     *
     * If no value is specified a default image preview size is used.
     */
    maxImagePreview?: 'none' | 'standard' | 'large';
    /**
     * A number representing the maximum of amount characters to use as a textual snippet for a search result. This value
     * can also be set to one of the following special values:
     *
     * - 0 - No snippet is to be shown. Equivalent to nosnippet.
     * - 1 - The Search engine will choose the snippet length that it believes is most effective to help users discover
     *   your content and direct users to your site
     * - -1 - No limit on the number of characters that can be shown in the snippet.
     */
    maxSnippet?: number;
    /**
     * The maximum number of seconds for videos on this page to show in search results. This value can also be set to one
     * of the following special values:
     *
     * - 0 - A static image may be used with the `maxImagePreview` setting.
     * - 1 - There is no limit to the size of the video preview.
     *
     * This applies to all forms of search results (at Google: web search, Google Images, Google Videos, Discover,
     * Assistant).
     */
    maxVideoPreview?: number;
    /**
     * Do not show a cached link in search results.
     */
    noArchive?: boolean;
    /**
     * Do not follow the links on this page.
     *
     * @see https://developers.google.com/search/docs/advanced/guidelines/qualify-outbound-links
     */
    noFollow?: boolean;
    /**
     * Do not index images on this page.
     */
    noImageIndex?: boolean;
    /**
     * Do not show this page, media, or resource in search results.
     */
    noIndex?: boolean;
    /**
     * Do not show a text snippet or video preview in the search results for this page.
     */
    noSnippet?: boolean;
    /**
     * Do not offer translation of this page in search results.
     */
    noTranslate?: boolean;
    /**
     * Do not show this page in search results after the specified date/time.
     */
    unavailableAfter?: string;
}
interface LanguageAlternate {
    /**
     * Language code for the alternate page. This is used to generate the hreflang meta tag property.
     */
    language: string;
    /**
     * Whether the alternate page is the default page. This will add the `x-default` attribution to the language code.
     */
    default?: boolean;
    /**
     * The url of the alternate page. This is used to generate the hreflang meta tag property.
     */
    url: string;
}
type SeoMedia = {
    /**
     * Used to generate og:<type of media> meta tag
     */
    type: 'image' | 'video' | 'audio';
    /**
     * The url value populates both url and secure_url and is used to infer the og:<type of media>:type meta tag.
     */
    url: Maybe<string> | undefined;
    /**
     * The height in pixels of the media. This is used to generate the og:<type of media>:height meta tag.
     */
    height: Maybe<number> | undefined;
    /**
     * The width in pixels of the media. This is used to generate the og:<type of media>:width meta tag.
     */
    width: Maybe<number> | undefined;
    /**
     * The alt text for the media. This is used to generate the og:<type of media>:alt meta tag.
     */
    altText: Maybe<string> | undefined;
};

interface SeoHandleFunction<Loader extends LoaderFunction | unknown = unknown, StructuredDataSchema extends Thing = Thing> {
    (args: {
        data: Loader extends LoaderFunction ? SerializeFrom<Loader> : AppData;
        id: string;
        params: Params;
        pathname: Location['pathname'];
        search: Location['search'];
        hash: Location['hash'];
        key: string;
    }): Partial<SeoConfig<StructuredDataSchema>>;
}
interface SeoProps {
    debug?: boolean;
}
declare function Seo({ debug }: SeoProps): react.FunctionComponentElement<{
    children?: react.ReactNode;
}>;

export { CacheCustom, CacheLong, CacheNone, CacheShort, CreateStorefrontClientOptions, I18nBase, InMemoryCache, Seo, SeoConfig, SeoHandleFunction, Storefront, StorefrontClient, StorefrontMutationOptions, StorefrontQueryOptions, WithCache, createStorefrontClient, createWithCache_unstable, generateCacheControlHeader, graphiqlLoader, isStorefrontApiError, storefrontRedirect };
