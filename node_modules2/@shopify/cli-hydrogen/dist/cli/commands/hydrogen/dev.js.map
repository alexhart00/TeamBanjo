{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../../../src/cli/commands/hydrogen/dev.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,uBAAuB,CAAA;AAC9C,OAAO,EAAC,aAAa,EAAC,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAA;AACrD,OAAO,OAAO,MAAM,oCAAoC,CAAA;AACxD,OAAO,EAAC,WAAW,EAAE,GAAG,EAAC,MAAM,4BAA4B,CAAA;AAE3D,MAAM,CAAC,OAAO,OAAO,GAAI,SAAQ,OAAO;IAoBtC,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACrC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;QAE9D,MAAM,UAAU,CAAC,EAAC,SAAS,EAAE,GAAG,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC,CAAA;IACrE,CAAC;;AAxBM,eAAW,GAAG,oDAAoD,CAAA;AAClE,SAAK,GAAG;IACb,GAAG,WAAW;IACd,IAAI,EAAE,aAAa,CAAC,IAAI;IACxB,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;QACnB,WAAW,EAAE,gCAAgC;QAC7C,GAAG,EAAE,wBAAwB;KAC9B,CAAC;IACF,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;QAClB,WAAW,EAAE,8DAA8D;QAC3E,GAAG,EAAE,uBAAuB;KAC7B,CAAC;IACF,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;QAClB,WAAW,EAAE,2CAA2C;QACxD,GAAG,EAAE,uBAAuB;QAC5B,OAAO,EAAE,KAAK;KACf,CAAC;CACH,CAAA","sourcesContent":["import devService from '../../services/dev.js'\nimport {hydrogenFlags} from '../../flags.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport Command from '@shopify/cli-kit/node/base-command'\nimport {resolvePath, cwd} from '@shopify/cli-kit/node/path'\n\nexport default class Dev extends Command {\n  static description = 'Run a Hydrogen storefront locally for development.'\n  static flags = {\n    ...globalFlags,\n    path: hydrogenFlags.path,\n    force: Flags.boolean({\n      description: 'force dependency pre-bundling.',\n      env: 'SHOPIFY_FLAG_DEV_FORCE',\n    }),\n    host: Flags.boolean({\n      description: 'listen on all addresses, including LAN and public addresses.',\n      env: 'SHOPIFY_FLAG_DEV_HOST',\n    }),\n    open: Flags.boolean({\n      description: 'automatically open the app in the browser',\n      env: 'SHOPIFY_FLAG_DEV_OPEN',\n      default: false,\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Dev)\n    const directory = flags.path ? resolvePath(flags.path) : cwd()\n\n    await devService({directory, ...flags, commandConfig: this.config})\n  }\n}\n"]}