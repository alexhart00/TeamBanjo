{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/cli/services/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["import {DeployConfig, ReqDeployConfig} from './deploy/types.js'\nimport {createDeployment, healthCheck, uploadDeployment} from './deploy/upload.js'\nimport {buildTaskList} from './build.js'\nimport {validateProject, fillDeployConfig} from './deploy/config.js'\nimport {sleep} from '@shopify/cli-kit/node/system'\nimport {isUnitTest} from '@shopify/cli-kit/node/environment/local'\nimport {Task, renderTasks, renderWarning} from '@shopify/cli-kit/node/ui'\n\ninterface TaskContext {\n  config: ReqDeployConfig\n  deploymentID: string\n  assetBaseURL: string\n  previewURL: string\n}\n\nconst backoffPolicy = [5, 10, 15, 30, 60]\n\nexport async function deployToOxygen(_config: DeployConfig) {\n  await validateProject(_config)\n\n  /* eslint-disable require-atomic-updates */\n  const tasks: Task<TaskContext>[] = [\n    {\n      title: 'Getting deployment config',\n      task: async (ctx) => {\n        ctx.config = await fillDeployConfig(_config)\n      },\n    },\n    {\n      title: 'Initializing deployment',\n      task: async (ctx, task) => {\n        await shouldRetryOxygenCall(task, 'Could not create deployment on Oxygen.')\n\n        const {deploymentID, assetBaseURL} = await createDeployment(ctx.config)\n        ctx.assetBaseURL = assetBaseURL\n        ctx.deploymentID = deploymentID\n      },\n      retry: backoffPolicy.length,\n    },\n    {\n      title: 'Building project',\n      task: async (ctx) => {\n        const subTasks = buildTaskList({\n          directory: ctx.config.path,\n          targets: {\n            client: true,\n            worker: '@shopify/hydrogen/platforms/worker',\n            node: false,\n          },\n          assetBaseURL: ctx.assetBaseURL,\n        })\n\n        return subTasks\n      },\n      skip: (ctx) => Boolean(ctx.config.pathToBuild),\n    },\n    {\n      title: 'Uploading deployment files',\n      task: async (ctx, task) => {\n        await shouldRetryOxygenCall(task, 'Uploading files to Oxygen failed.')\n\n        ctx.previewURL = await uploadDeployment(ctx.config, ctx.deploymentID)\n      },\n      retry: backoffPolicy.length,\n    },\n    {\n      title: 'Checking deployment health',\n      task: async (ctx, task) => {\n        const retryCount = task.retryCount\n\n        if (retryCount === backoffPolicy.length) {\n          throw new Error(`Deployment health check failed.`)\n        }\n\n        if (retryCount && !isUnitTest()) await sleep(backoffPolicy[retryCount - 1]!)\n\n        await healthCheck(ctx.previewURL)\n      },\n      retry: backoffPolicy.length,\n      skip: (ctx) => !ctx.config.healthCheck,\n    },\n  ]\n  /* eslint-enable require-atomic-updates */\n\n  try {\n    await renderTasks(tasks)\n  } catch (error: unknown) {\n    if (error instanceof Error && error.message === 'Deployment health check failed.') {\n      renderWarning({\n        headline:\n          \"The deployment uploaded but hasn't become reachable within 2 minutes. Check the preview URL to see if deployment succeeded. If it didn't, then try again later.\",\n      })\n    } else {\n      throw error\n    }\n  }\n}\n\nasync function shouldRetryOxygenCall(task: Task<TaskContext>, errorMessage: string) {\n  const retryCount = task.retryCount\n  const taskErrors = task.errors ?? []\n  if (retryCount === backoffPolicy.length) {\n    throw new Error(`${errorMessage} ${taskErrors[taskErrors.length - 1]?.message}`)\n  }\n  if (retryCount) {\n    if (taskErrors.length > 0) {\n      const unrecoverableError = taskErrors.find((error) => error.message.includes('Unrecoverable'))\n      if (unrecoverableError) {\n        throw new Error(unrecoverableError.message)\n      }\n    }\n  }\n  if (retryCount && !isUnitTest()) await sleep(backoffPolicy[retryCount - 1]!)\n}\n"]}