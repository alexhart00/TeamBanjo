{"version":3,"file":"tailwind.js","sourceRoot":"","sources":["../../../src/cli/services/tailwind.ts"],"names":[],"mappings":"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","sourcesContent":["import {HydrogenApp} from '../models/hydrogen.js'\nimport {addNPMDependenciesWithoutVersionIfNeeded} from '@shopify/cli-kit/node/node-package-manager'\nimport {addRecommendedExtensions} from '@shopify/cli-kit/node/vscode'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {writeFile, fileExists, removeFile, fileContentPrettyFormat, readFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {renderTasks, Task} from '@shopify/cli-kit/node/ui'\n\ninterface AddTailwindOptions {\n  app: HydrogenApp\n  force: boolean\n  directory: string\n  install: boolean\n}\n\nconst tailwindImports = [\n  \"@import 'tailwindcss/base';\",\n  \"@import 'tailwindcss/components';\",\n  \"@import 'tailwindcss/utilities';\",\n]\n\nconst tailwindImportsExist = (indexCSS: string) =>\n  tailwindImports.map((el) => new RegExp(el)).every((tailwindDirective) => tailwindDirective.test(indexCSS))\n\nexport async function addTailwind({app, force, install, directory}: AddTailwindOptions) {\n  const tasks: Task[] = [\n    {\n      title: 'Installing dependencies',\n      skip: () => !install,\n      task: async () => {\n        const requiredDependencies = ['postcss', 'postcss-loader', 'tailwindcss', 'autoprefixer']\n        await addNPMDependenciesWithoutVersionIfNeeded(requiredDependencies, {\n          packageManager: app.packageManager,\n          type: 'prod',\n          directory: app.directory,\n        })\n      },\n    },\n\n    {\n      title: 'Adding PostCSS configuration',\n      task: async () => {\n        const postCSSConfiguration = joinPath(directory, 'postcss.config.js')\n\n        if (await fileExists(postCSSConfiguration)) {\n          if (force) {\n            await removeFile(postCSSConfiguration)\n          } else {\n            throw new AbortError('PostCSS config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        const postCSSConfig = await fileContentPrettyFormat(\n          ['module.exports = {', 'plugins: {', 'tailwindcss: {},', 'autoprefixer: {},', '},', ' };'].join('\\n'),\n          {path: 'postcss.config.js'},\n        )\n\n        await writeFile(postCSSConfiguration, postCSSConfig)\n      },\n    },\n\n    {\n      title: 'Initializing Tailwind CSS...',\n      task: async () => {\n        const tailwindConfigurationPath = joinPath(directory, 'tailwind.config.js')\n\n        if (await fileExists(tailwindConfigurationPath)) {\n          if (force) {\n            await removeFile(tailwindConfigurationPath)\n          } else {\n            throw new AbortError('Tailwind config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        await exec(app.packageManager, ['tailwindcss', 'init', tailwindConfigurationPath], {\n          cwd: directory,\n        })\n\n        await replace(\n          'content: []',\n          \"content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}']\",\n          tailwindConfigurationPath,\n        )\n      },\n    },\n    {\n      title: 'Importing Tailwind CSS in index.css',\n      task: async (_ctx, task) => {\n        const indexCSSPath = joinPath(directory, 'src', 'index.css')\n        const indexCSS = await readFile(indexCSSPath)\n\n        if (!tailwindImportsExist(indexCSS)) {\n          const newIndexCSS = tailwindImports.join('\\n') + indexCSS\n\n          await writeFile(indexCSSPath, newIndexCSS)\n        }\n      },\n    },\n    {\n      title: 'Adding editor plugin recommendations',\n      task: async () => {\n        await addRecommendedExtensions(directory, ['csstools.postcss', 'bradlc.vscode-tailwindcss'])\n      },\n    },\n  ]\n\n  await renderTasks(tasks)\n}\n\nasync function replace(find: string | RegExp, replace: string, filepath: string) {\n  const original = await readFile(filepath)\n  const modified = original.replace(find, replace)\n  await writeFile(filepath, modified)\n}\n"]}